{
  "language": "Solidity",
  "sources": {
    "contracts/Admin.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.8;\n\n//Imports\nimport \"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\";\n//Errors\nerror Admin__Not_Admin();\nerror Admin__WithdrawFailed();\nerror Admin__UpkeepNotTrue();\nerror Admin__NoBrandAvailable();\n\n/**@title Admin Smart Contract\n *@notice This contract is only accessable by someone in authority and can be used to check & maintain brands that provide nft warranties.\n *@dev It interracts with the Brand Smart Contract to add their details in brands array & check for their warranty period.\n */\ncontract Admin is KeeperCompatibleInterface {\n    //Type Declaration\n    struct Brand {\n        address brandAddress;\n        string brandName;\n        uint256 warrantyPeriod;\n    }\n\n    //State Variables\n    address payable private immutable i_owner;\n    uint256 private immutable i_interval;\n    Brand[] private s_brands;\n    uint256 private s_currentTimeStamp;\n    mapping(uint256 => uint256) private s_warrantyPack;\n    mapping(address => uint256) private s_addressToBrandIndex;\n\n    //Events\n    event BrandAdded(address indexed brandAdd);\n    event WarrantyExtended(address indexed brandAdd);\n\n    //Modifiers\n    modifier onlyAdmin() {\n        if (msg.sender != i_owner) revert Admin__Not_Admin();\n        _;\n    }\n\n    //Constructor\n    constructor(uint256 interval) {\n        i_owner = payable(msg.sender);\n        i_interval = interval;\n        s_currentTimeStamp = block.timestamp;\n        s_warrantyPack[1] = 30;\n        s_warrantyPack[2] = 60;\n        s_warrantyPack[3] = 90;\n    }\n\n    //Recieve or Fallback\n\n    //Functions\n\n    ////External\n\n    function addBrand(\n        address _brandAdd,\n        string memory _brandName,\n        uint256 _warrantyIndex\n    ) external {\n        s_addressToBrandIndex[_brandAdd] = s_brands.length;\n        s_brands.push(Brand(_brandAdd, _brandName, s_warrantyPack[_warrantyIndex]));\n        emit BrandAdded(_brandAdd);\n    }\n\n    function extendWarranty(address _brandAdd, uint256 _warrantyIndex) external {\n        uint256 index = s_addressToBrandIndex[_brandAdd];\n        s_brands[index].warrantyPeriod += s_warrantyPack[_warrantyIndex];\n        emit WarrantyExtended(_brandAdd);\n    }\n\n    ////Public\n\n    function withdraw() public onlyAdmin {\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        if (!callSuccess) revert Admin__WithdrawFailed();\n    }\n\n    function checkUpkeep(\n        bytes memory /* checkData */\n    )\n        public\n        view\n        override\n        returns (\n            bool upkeepNeeded,\n            bytes memory /* performData */\n        )\n    {\n        upkeepNeeded = (block.timestamp - s_currentTimeStamp) > i_interval;\n        return (upkeepNeeded, \"0x0\");\n    }\n\n    function performUpkeep(\n        bytes calldata /* performData */\n    ) external override {\n        (bool upkeepNeeded, ) = checkUpkeep(\"\");\n\n        if (!upkeepNeeded) revert Admin__UpkeepNotTrue();\n        if (s_brands.length == 0) revert Admin__NoBrandAvailable();\n\n        for (uint256 i = 0; i < s_brands.length; i++) {\n            s_brands[i].warrantyPeriod -= 1;\n        }\n\n        // Brand[] storage finalTemp;\n        // // finalTemp.push(Brand(\"\",\"\",2));\n        // for (uint256 i = 0; i < s_brands.length; i++) {\n        //     if (s_brands[i].warrantyPeriod != 0) {\n        //         finalTemp.push(s_brands[i]);\n        //     }\n        // }\n\n        // for (uint256 i = 0; i < finalTemp.length; i++) {\n        //     s_brands[i] = finalTemp[i];\n        // }\n\n        // for (uint256 i = finalTemp.length; i < s_brands.length; i++) {\n        //     delete s_brands[i];\n        // }\n\n        // s_currentTimeStamp = block.timestamp;\n    }\n\n    //View or Pure Functions\n\n    function getOwner() public view returns (address) {\n        return i_owner;\n    }\n\n    function getInterval() public view returns (uint256) {\n        return i_interval;\n    }\n\n    function getNumberOfBrands() public view returns (uint256) {\n        return s_brands.length;\n    }\n\n    function getWarrantyPack(uint256 index) public view returns (uint256) {\n        return s_warrantyPack[index];\n    }\n\n    function getBrandAddress(uint256 index) public view returns (address) {\n        return s_brands[index].brandAddress;\n    }\n\n    function getBrandName(uint256 index) public view returns (string memory) {\n        return s_brands[index].brandName;\n    }\n\n    function getBrandWarrantyLeft(uint256 index) public view returns (uint256) {\n        return s_brands[index].warrantyPeriod;\n    }\n\n    function getBrandIndex(address brandAdd) public view returns (uint256) {\n        return s_addressToBrandIndex[brandAdd];\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface KeeperCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}